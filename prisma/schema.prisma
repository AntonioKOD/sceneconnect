// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(cuid())
  username     String?   @unique
  email        String?   @unique
  password     String?
  emailVerified Boolean  @default(false)
  emailToken   String?
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         String   @default("USER")
  balance      Float    @default(0)
  
  scenesCreated Scene[]
  pledges       Pledge[]
  votes         Vote[]
  comments      Comment[]
  subscriptions Subscription[]
  notifications Notification[]
  sessions      Session[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Scene {
  id             String   @id @default(cuid())
  title          String
  description    String
  status         String   @default("IDEA")
  creatorId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  fundingGoal    Float
  currentFunding Float    @default(0)
  nicheTags      String[]
  voteCount      Int      @default(0)
  videoUrl       String?

  creator  User      @relation(fields: [creatorId], references: [id])
  pledges  Pledge[]
  votes    Vote[]
  comments Comment[]
  creators   Creator[]   @relation("SceneCreators")

  @@map("scenes")
}

model Pledge {
  id        String   @id @default(cuid())
  userId    String
  sceneId   String
  amount    Float
  createdAt DateTime @default(now())
  status    String   @default("PENDING")
  user      User     @relation(fields: [userId], references: [id])
  scene     Scene    @relation(fields: [sceneId], references: [id])
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  sceneId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  scene     Scene    @relation(fields: [sceneId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  sceneId   String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  scene     Scene    @relation(fields: [sceneId], references: [id])
}

model Subscription {
  id        String    @id @default(cuid())
  userId    String
  plan      String
  startDate DateTime  @default(now())
  endDate   DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Creator {
  id           String  @id @default(cuid())
  name         String
  bio          String
  profileImage String
  scenes       Scene[] @relation("SceneCreators")
}
