generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  CREATOR
  ADMIN
}

enum SceneStatus {
  IDEA
  IN_PROGRESS
  COMPLETED
}

enum PledgeStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model User {
  id            String         @id @default(cuid())
  name          String         @unique
  email         String         @unique
  password      String?
  emailVerified Boolean        @default(false)
  emailToken    String?
  profileImage  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          UserRole       @default(USER)
  balance       Float          @default(0)
  bio           String?
  instagram     String?        @default("")
  twitter       String?        @default("")
  facebook      String?        @default("")
  onlyfans      String?        @default("")
  scenesCreated Scene[]        @relation("UserScenes")
  pledges       Pledge[]
  votes         Vote[]
  comments      Comment[]
  subscriptions Subscription[] @relation("UserSubscriptions")
  creatorSubscriptions Subscription[] @relation("CreatorSubscriptions")
  notifications Notification[]
  sessions      Session[]
  posts         Post[]         @relation("UserPosts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Scene {
  id             String   @id @default(cuid())
  title          String
  description    String
  status         SceneStatus @default(IDEA) // ✅ Uses Enum
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  fundingGoal    Float
  currentFunding Float    @default(0)
  nicheTags      String[] @default([]) // ✅ Default value added
  voteCount      Int      @default(0)
  videoUrl       String?

  creatorId String
  creator   User    @relation(fields: [creatorId], references: [id], name: "UserScenes") // ✅ Fixed Relation Name

  pledges   Pledge[]
  votes     Vote[]
  comments  Comment[]
}

model Pledge {
  id        String   @id @default(cuid())
  userId    String
  sceneId   String
  amount    Float
  createdAt DateTime @default(now())
  status    PledgeStatus @default(PENDING) // ✅ Uses Enum
  user      User     @relation(fields: [userId], references: [id])
  scene     Scene    @relation(fields: [sceneId], references: [id])
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  sceneId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  scene     Scene    @relation(fields: [sceneId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  sceneId   String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  scene     Scene    @relation(fields: [sceneId], references: [id])
}

model Subscription {
  id         String   @id @default(cuid())
  userId     String
  creatorId  String
  startDate  DateTime @default(now())
  endDate    DateTime?
  user       User     @relation("UserSubscriptions", fields: [userId], references: [id])
  creator    User     @relation("CreatorSubscriptions", fields: [creatorId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
model Post {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], name: "UserPosts")
  authorId  String
}